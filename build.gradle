allprojects {
    group = 'io.data2viz'
}

buildscript {

    repositories {
        jcenter()
        maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_version"
        classpath "com.moowork.gradle:gradle-node-plugin:$gradle_node_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.kordamp.gradle:stats-gradle-plugin:$stats_version"
    }
}

// Report Kotlin compiler version when building project
println("Using Kotlin compiler version: $org.jetbrains.kotlin.config.KotlinCompilerVersion.VERSION")

// --------------- Configure sub-projects with Kotlin sources ---------------

def sourceless = ['site']

static def moduleOf(project) {
    def projectName = project.name
    if (projectName.startsWith("d2v-")) {
        return projectName.substring(4, projectName.lastIndexOf('-'))
    } 
    else 
        return ""
}

static def platformOf(project) {
    if (project.name.endsWith("-common")) return "common"
    if (project.name.endsWith("-js")) return "js"
    return "jvm"
}

static def platformLib(base, platform) {
    if (platform == "jvm") return base
    return "$base-$platform"
}

configure(subprojects.findAll { !sourceless.contains(it.name) }) {

    def platform = platformOf(it)
    apply plugin: "kotlin-platform-$platform"
    
    repositories {
        jcenter()
    }
    
    apply plugin: 'com.jfrog.bintray'
//    apply plugin: 'org.jetbrains.dokka'
    

//    dokka {
//        outputFormat = 'html'
//        outputDirectory = "$buildDir/javadoc"
//    }

    if (project.name.endsWith('-common')) {
        apply plugin: 'kotlin-platform-common'
        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
            testCompile project(":d2v-tests-common")
        }
    }
    if (project.name.endsWith('-js')) {
        apply plugin: 'kotlin-platform-js'
        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
            testCompile project(":d2v-tests-common")
            testCompile project(":d2v-tests-js")
        }
        compileKotlin2Js {
            kotlinOptions {
                metaInfo = true
                sourceMap = true
                sourceMapEmbedSources = "always"
                moduleKind = 'umd'
                main = "call"
            }
        }
        compileTestKotlin2Js { kotlinOptions.moduleKind = 'umd' }
    }
    if (project.name.endsWith('-jvm')) {
        apply plugin: 'kotlin-platform-jvm'
        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
            testCompile project(":d2v-tests-common")
            testCompile project(":d2v-tests-jvm")
            testCompile 'junit:junit:4.12'
        }

        //for tornadoFx
        compileKotlin     { kotlinOptions.jvmTarget = 1.8 }
        compileTestKotlin { kotlinOptions.jvmTarget = 1.8 }

    }
}

// --------------- Configure sub-projects that are published ---------------

configure(subprojects.findAll { it.name.startsWith('d2v-') }) {
    apply plugin: 'org.kordamp.gradle.stats'
    
    apply from: rootProject.file('gradle/publish-bintray.gradle')  
}

apply plugin: 'base'

task aggregateStatsReport(type: org.kordamp.gradle.stats.AggregateStatsReportTask) {}
