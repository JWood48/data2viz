buildscript {

    repositories {
        jcenter()
        maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
        classpath 'org.kordamp.gradle:stats-gradle-plugin:0.2.0'
    }
}

apply plugin: 'com.jfrog.bintray'

allprojects {
    repositories {
        jcenter()
        maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
    }
    apply plugin: 'maven'


    project.ext.jsTests = {

        apply plugin: 'com.moowork.node'
        node {
            download true
        }

        task populateNodeModules(type: Copy, dependsOn: compileTestKotlin2Js) {

            from compileKotlin2Js.destinationDir

            configurations.testCompile.each {
                from zipTree(it.absolutePath).matching { include '*.js' }
            }

            into "${buildDir}/node_modules"
        }


        task yarnInstall(type: YarnTask) {
            args = ['install']
        }

        task runKarma(type: YarnTask, dependsOn: [populateNodeModules, yarnInstall]) {
            args = ['test']
        }

        test.dependsOn runKarma

    }
}

subprojects {
    repositories {
        jcenter()
    }
    apply plugin: 'org.kordamp.gradle.stats'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven-publish'

    if (project.name.contains('-common')) {
        apply plugin: 'kotlin-platform-common'
        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
            testCompile project(":d2v-tests-common")
        }
    }
    if (project.name.contains('-js')) {
        apply plugin: 'kotlin-platform-js'
        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
            testCompile project(":d2v-tests-common")
            testCompile project(":d2v-tests-js")
        }
        compileKotlin2Js {
            kotlinOptions {
                metaInfo = true
                outputFile = "${project.buildDir.path}/classes/main/${project.name}.js"
                sourceMap = true
                sourceMapEmbedSources = "always"
                moduleKind = 'umd'
                main = "call"
            }
        }
        compileTestKotlin2Js { kotlinOptions.moduleKind = 'umd' }
    }
    if (project.name.contains('-jvm')) {
        apply plugin: 'kotlin-platform-jvm'
        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
            testCompile project(":d2v-tests-common")
            testCompile project(":d2v-tests-jvm")
            testCompile 'junit:junit:4.12'
        }

        //for tornadoFx
        compileKotlin     { kotlinOptions.jvmTarget = 1.8 }
        compileTestKotlin { kotlinOptions.jvmTarget = 1.8 }

    }


    if (project.hasProperty("bintray.user")) {
        bintray {
            user = project.property('bintray.user')
            key = project.property('bintray.key')
            configurations = ['archives']

            pkg {
                repo = 'data2viz'
                name = 'data2viz'
                userOrg = 'data2viz'
                licenses = ['Apache-2.0']
                vcsUrl = 'https://github.com/data2viz/data2viz.git'
                version {
                    name = "${project.version}"
//                desc = "data2viz-${project.name}"
//                released  = new Date()
//                vcsTag = "$version"
                }
            }
        }

    }

    if (
    !project.name.contains('-common') &&
            !project.name.contains('-js') &&
            !project.name.contains('-jvm')
    ) {
        apply plugin: 'kotlin2js'

        dependencies {
            testCompile project(":d2v-tests-common")
            testCompile project(":d2v-tests-js")
            testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
            compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
        }

        compileKotlin2Js {
            kotlinOptions {
                metaInfo = true
                outputFile = "${project.buildDir.path}/classes/main/${project.name}.js"
                sourceMap = true
                sourceMapEmbedSources = "always"
                moduleKind = 'umd'
                main = "call"
            }
        }
        compileTestKotlin2Js { kotlinOptions.moduleKind = 'umd' }

        configurations {
            testArtifacts.extendsFrom testRuntime
        }
        task testJar(type: Jar) {
            classifier "test"
            from sourceSets.test.output
        }
        artifacts {
            testArtifacts testJar
        }


    }

}


task aggregateStatsReport(type: org.kordamp.gradle.stats.AggregateStatsReportTask) {}
